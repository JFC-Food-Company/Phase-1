{"version":3,"sources":["images/Logo-Placeholder.png","styles/keyframes.js","styles/navbar_style.js","components/Navbar.js","components/BuildAMeal.js","components/Catering.js","components/AboutUs.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","keyframes","LogoFocusIn","Styled","a","Navigation","Navbar","NaviLink","NavLink","LogoFade","div","Navibar","useState","isOpen","setIsOpen","dark","expand","NavbarBrand","src","Logo","alt","style","width","cursor","border","NavbarToggler","onClick","Collapse","navbar","Nav","className","UncontrolledDropdown","nav","inNavbar","DropdownToggle","color","caret","DropdownMenu","right","DropdownItem","divider","NavItem","to","BuildAMeal","Catering","AboutUs","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,8C,o6BCElBC,YAAH,KAeAA,YAAH,KAfZ,IA+BMC,EAAcD,YAAH,K,k+DC5BAE,IAAOC,EAAV,KAcID,IAAOC,EAAV,KAdf,IA4CMC,EAAaF,YAAOG,IAAPH,CAAH,KAcVI,EAAWJ,YAAOK,IAAPL,CAAH,KAiCRM,EAAWN,IAAOO,IAAV,IAERR,G,8FC3BES,EAvDC,WAAO,IAAD,EACQC,oBAAS,GADjB,mBACbC,EADa,KACLC,EADK,KAKpB,OACE,kBAACT,EAAD,CAAYU,MAAI,EAACC,OAAO,MACtB,kBAACC,EAAA,EAAD,KACE,kBAACR,EAAD,KACE,yBACES,IAAKC,IACLC,IAAI,OACJC,MAAO,CACLC,MAAO,OACPC,OAAQ,UACRC,OAAQ,qBAKhB,kBAACC,EAAA,EAAD,CAAeC,QAjBJ,kBAAMZ,GAAWD,MAkB5B,kBAACc,EAAA,EAAD,CAAUd,OAAQA,EAAQe,QAAM,GAC9B,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUF,QAAM,GAC7B,kBAACG,EAAA,EAAD,CAAsBC,KAAG,EAACC,UAAQ,GAChC,kBAACC,EAAA,EAAD,CACEb,MAAO,CACLc,MAAO,SAETH,KAAG,EACHI,OAAK,GALP,SASA,kBAACC,EAAA,EAAD,CAAcC,OAAK,GACjB,kBAACC,EAAA,EAAD,sBACA,kBAACA,EAAA,EAAD,aACA,kBAACA,EAAA,EAAD,CAAcC,SAAO,IACrB,kBAACD,EAAA,EAAD,uBAGJ,kBAACE,EAAA,EAAD,KACE,kBAAClC,EAAD,CAAUmC,GAAG,aAAb,eAEF,kBAACD,EAAA,EAAD,KACE,kBAAClC,EAAD,CAAUmC,GAAG,aAAb,aAEF,kBAACD,EAAA,EAAD,KACE,kBAAClC,EAAD,CAAUmC,GAAG,UAAb,iBCrDGC,MARf,WACE,OACE,6BACE,mDCKSC,MARf,WACE,OACE,6BACE,+CCKSC,MARf,WACE,OACE,6BACE,+CCkBSC,MAff,WACE,OACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,MAClB,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,gBAAgBC,UAAWN,IAC7C,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,YAAYC,UAAWL,IACzC,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,SAASC,UAAWJ,KAExC,6ECNcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.995b7793.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo-Placeholder.2607f242.png\";","import { keyframes } from \"styled-components\"\n\nexport const ScaleDown = keyframes`\n {\n  0% {\n    -webkit-transform: translateZ(1);\n            transform: translateZ(1);\n    opacity: 1;\n  }\n  100% {\n    -webkit-transform: translateZ(600px);\n            transform: translateZ(600px);\n    opacity: 0;\n  }\n`\n// animation: slide-out-fwd-center 5s cubic-bezier(0.550, 0.085, 0.680, 0.530) reverse both;\n\nexport const FadeIn = keyframes`\n\n  0% {\n    opacity: 1;\n  }\n  50%{\n    opacity: 0;\n  }\n  100% {\n    opacity: 0;\n  }\n\n`;\n\n//animation: fade-out 1s ease-out reverse both;\n\nexport const LogoFocusIn = keyframes`\n0% {\n            transform: scale(2);\n            filter: blur(4px);\n    opacity: 0;\n  }\n  100% {\n            transform: scale(1);\n            filter: blur(0px);\n    opacity: 1;\n  }\n`;\n\n//animation:  animation: puff-in-center 0.7s cubic-bezier(0.470, 0.000, 0.745, 0.715) both;","import Styled from \"styled-components\";\nimport { LogoFocusIn } from \"./keyframes\";\nimport { Navbar } from \"reactstrap\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const LinkGray = Styled.a`\ntext-align: center;\ntext-decoration: none;\njustify-content: center;\ncolor: gray;\nwhite-space: nowrap;\noverflow: hidden;\ntext-overflow: ellipsis;\nwidth: 100%;\nfont-family: 'Rubik', sans-serif;\nfont-weight: 100;\npadding-top: 15%;\n`;\n\nexport const LinkBlack = Styled.a`\ntext-align: center;\ntext-decoration: none;\njustify-content: center;\ncolor: black;\nwhite-space: nowrap;\noverflow: hidden;\ntext-overflow: ellipsis;\nwidth: 100%;\nfont-family: 'Rubik', sans-serif;\nfont-weight: 100;\npadding-top: 7%;\n\n    &::after {\n    content: \" \";\n    display: block;\n    width: 0;\n    height: 2px;\n    background: black;\n    transition: width .2s;\n    margin: 0 auto;\n    }\n\n    &:hover::after {\n    width: 100%;\n    transition: width .2s;\n    margin: 0 auto;\n    }\n`;\n\nexport const Navigation = Styled(Navbar)`\nbackground-color: hsla(0, 0%, 100%, 0.85);\ndisplay: flex;\nflex-direction: row;\nflex-wrap: nowrap;\njustify-content: space-evenly;\nz-Index: 10;\nborder: 1px red solid;\ntransition: box-shadow 0.2s ease;\n        &:hover {\n          box-shadow: 0 6px 4px rgba(0, 0, 0, 0.18);\n        }\n`;\n\nexport const NaviLink = Styled(NavLink)`\ndisplay: flex;\ntext-align: center;\ntext-decoration: none;\njustify-content: center;\ncolor: black;\nwhite-space: nowrap;\noverflow: hidden;\ntext-overflow: ellipsis;\nwidth: 100%;\nfont-family: 'Rubik', sans-serif;\nfont-weight: 100;\npadding-top: 7%;\n\n    &::after {\n    content: \" \";\n    display: block;\n    width: 0;\n    height: 2px;\n    background: black;\n    transition: width .2s;\n    margin: 0 auto;\n    }\n\n    &:hover::after {\n    width: 100%;\n    transition: width .2s;\n    margin: 0 auto;\n    }\n`;\n\n//animations\n\nexport const LogoFade = Styled.div`\ndisplay:flex;\nanimation: ${LogoFocusIn} 1s cubic-bezier(0.470, 0.000, 0.745, 0.715) both;\n`;\n","import React, { useState } from \"react\";\nimport { Navigation, LogoFade, NaviLink } from \"../styles/navbar_style\";\n\nimport Logo from \"../images/Logo-Placeholder.png\";\nimport {\n  Collapse,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from \"reactstrap\";\n\nconst Navibar = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <Navigation dark expand=\"sm\">\n      <NavbarBrand>\n        <LogoFade>\n          <img\n            src={Logo}\n            alt=\"logo\"\n            style={{\n              width: \"100%\",\n              cursor: \"pointer\",\n              border: \"1px red solid\",\n            }}\n          />\n        </LogoFade>\n      </NavbarBrand>\n      <NavbarToggler onClick={toggle} />\n      <Collapse isOpen={isOpen} navbar>\n        <Nav className=\"mr-auto\" navbar>\n          <UncontrolledDropdown nav inNavbar>\n            <DropdownToggle\n              style={{\n                color: \"black\",\n              }}\n              nav\n              caret\n            >\n              Menus\n            </DropdownToggle>\n            <DropdownMenu right>\n              <DropdownItem>Chef's Choice</DropdownItem>\n              <DropdownItem>Keto</DropdownItem>\n              <DropdownItem divider />\n              <DropdownItem>Build A Meal</DropdownItem>\n            </DropdownMenu>\n          </UncontrolledDropdown>\n          <NavItem>\n            <NaviLink to=\"/catering\">Meal Plans</NaviLink>\n          </NavItem>\n          <NavItem>\n            <NaviLink to=\"/catering\">Catering</NaviLink>\n          </NavItem>\n          <NavItem>\n            <NaviLink to=\"/about\">About Us</NaviLink>\n          </NavItem>\n        </Nav>\n      </Collapse>\n    </Navigation>\n  );\n};\n\nexport default Navibar;\n","import React from \"react\";\n\nfunction BuildAMeal() {\n  return (\n    <div>\n      <h1>Build a Meal Page</h1>\n    </div>\n  );\n}\n\nexport default BuildAMeal;\n","import React from \"react\";\n\nfunction Catering() {\n  return (\n    <div>\n      <h1>Catering Page</h1>\n    </div>\n  );\n}\n\nexport default Catering;\n","import React from \"react\";\n\nfunction AboutUs() {\n  return (\n    <div>\n      <h1>About US Page</h1>\n    </div>\n  );\n}\n\nexport default AboutUs;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport Navibar from \"./components/Navbar\";\nimport BuildAMeal from \"./components/BuildAMeal\";\nimport Catering from \"./components/Catering\";\nimport AboutUs from \"./components/AboutUs\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navibar />\n      <Switch>\n        <Route exact path=\"/\" />\n        <Route exact path=\"/build-a-meal\" component={BuildAMeal} />\n        <Route exact path=\"/catering\" component={Catering} />\n        <Route exact path=\"/about\" component={AboutUs} />\n      </Switch>\n      <h1>JFC Food Company website under construction</h1>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}